import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

/* REMEMBER THESE ARE REASSIGNABLE BY THE USER */
// built-ins
terminal PAIR, CAR, CDR, PAIR_PRED, LIST;
terminal SIZE;
terminal EQUIV_PRED, EQUAL_PRED;
terminal SUBSTR;

// keywords
terminal DEF, PROC, CALL, LET, IF, THEN, ELSE, CASE;

// standard I/O
terminal PRINT, PRINTLN, READ, READINT;

// special symbols
terminal LBRACE, RBRACE, LPAREN, RPAREN, LSQPAREN, RSQPAREN, VECT_OPEN, VECT_CLOSE;
terminal ASSIGN, BIND, COMMA, SEMI;

// compound data operators
terminal LSTCONCAT;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, EXP;

// bit-wise operators
terminal BIT_AND, BIT_OR, BIT_NOT;

// comparators
terminal LESS, LESSEQ, EQUAL, GREATEREQ, GREATER, NEQUAL;

// boolean operators
terminal AND, OR, NOT;

// terminals with values
terminal String VAR;
terminal Integer INT;
terminal Double DOUBLE;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String STRING;
terminal ExpLit<ArrayList> NIL;

/* Non terminals */
non terminal ArithProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;

non terminal StmtPrint print;

non terminal StmtDefinition definition;
non terminal StmtDefinition assignment;

non terminal Exp body;
non terminal StmtSequence compoundExpr;

non terminal ExpLet let;
non terminal ArrayList<ExpBind> bindList;
non terminal ExpBind binding;

non terminal StmtFunDefn funDefn;
non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;

non terminal ExpCase case;
non terminal ArrayList<ExpClause> clauseLst;
non terminal ExpClause clause;

non terminal ExpIf ifStmt;
non terminal StmtSequence else;

non terminal Exp expression;
non terminal Exp and;
non terminal Exp not;

non terminal Exp comparator;

non terminal Exp arithExp;
non terminal Exp term;
non terminal Exp factor;

non terminal ExpFunCall funCall;
non terminal ArrayList<Exp> argList;
non terminal ArrayList<Exp> argListE;

non terminal ExpRead read;

non terminal ExpLit<ArrayList<Exp>> list;
non terminal ArrayList<Exp> pairElementLst;

non terminal ExpLit<ArrayList<Exp>> vector;
non terminal ArrayList<Exp> vectorElementLst;

non terminal empty;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new ArithProgram(s); :};

stmtList ::= stmtList:lst stmt:s {:
				lst.add(s);
				RESULT = lst;
				:} |
	    stmt:s {: RESULT = new StmtSequence(s); :};

stmt ::= print:p SEMI {: RESULT = new ExpPrint(); :} |
		definition:d {:RESULT = d; :} |
		assignment:a {:RESULT = a; :} |
		expression:e SEMI {:RESULT = new Statement(e); :};


print ::= PRINT LPAREN expression:e RPAREN {: RESULT = new StmtPrint(e); :} |
		PRINTLN LPAREN expression:e RPAREN {: RESULT = new StmtPrintln(e); :};


definition ::= DEF VAR:v expression:e SEMI {: RESULT = new StmtDefinition(v, e); :};

assignment ::= VAR:v ASSIGN  expression:e SEMI {: RESULT = new StmtAssignment(v, e); :};


body ::= compoundExpr:sList {: RESULT = sList; :} |
		expression:e {: RESULT = e; :};

compoundExpr ::= LBRACE stmtList:sList RBRACE {: RESULT = sList; :};


expression ::= expression:e OR and:a {: RESULT = new ExpOr(e, a); :} |
				and:a {: RESULT = a; :};

and ::= and:a AND not:n {: RESULT = new ExpAnd(a, n); :} |
		not:n {: RESULT = n; :};

not ::= NOT comparator:c {: RESULT = new ExpNot(c); :} |
		comparator:c {: RESULT = c; :};


comparator ::= comparator:c LESS arithExp:a {:
					RESULT = new ExpLess(c, a); :} |
				comparator:c LESSEQ arithExp:a {:
					RESULT = new ExpLessEq(c, a); :} |
				comparator:c EQUAL arithExp:a {:
					RESULT = new ExpEqual(c, a); :} |
				comparator:c GREATEREQ arithExp:a {:
					RESULT = new ExpGreaterEq(c, a); :} |
				comparator:c GREATER arithExp:a {:
					RESULT = new ExpGreater(c, a); :} |
				comparator:c NEQUAL arithExp:a {:
					RESULT = new ExpNotEqual(c, a); :} |
				arithExp:a {:
					RESULT = a; :};


arithExp ::= arithExp:a PLUS term:t {:
			RESULT = new ExpAdd(a, t); :} |
		arithExp:a MINUS term:t {:
			RESULT = new ExpSub(a, t); :} |
		term:t {:
			RESULT = t; :};

term ::= term:t MUL factor:f {:
		RESULT = new ExpMul(t, f); :} |
	 term:t DIV factor:f {:
		RESULT = new ExpDiv(t, f); :} |
	 term:t MOD factor:f {:
		RESULT = new ExpMod(t, f); :} |
	 factor:f {:
	 	RESULT = f; :};

factor ::= let:l {: RESULT = l; :} |
		funDefn:f {: RESULT = f; :} |
		case:c {: RESULT = c; :} |
		ifStmt:i {: RESULT = i; :} |
		funCall:fCall {: RESULT = fCall; :} |
		read:r {: RESULT = r; :} |
		LPAREN expression:e RPAREN {: RESULT = e; :} |
		VAR:var {: RESULT = new ExpVar(var); :} |
		list:lst {: RESULT = lst; :} |
		vector:vect {: RESULT = vect; :} |
		INT:ilit {: RESULT = new ExpLit<Integer>("number", ilit); :} |
		DOUBLE:dlit {: RESULT = new ExpLit<Double>("number", dlit); :} |
		BOOL:blit {: RESULT = new ExpLit<Boolean>("boolean", blit); :} |
		CHAR:charLit {: RESULT = new ExpLit<Character>("character", charLit); :} |
		STRING:strLit {: RESULT = new ExpLit<String>("string", strLit); :};


let ::= LET LPAREN bindList:bindLst RPAREN body:b {:
	 		RESULT = new ExpLet(bindLst, b); :};

bindList ::= bindList:bindLst COMMA binding:b {:
                bindLst.add(b);
                RESULT = bindLst; :} |
            binding:b {:
                ArrayList<ExpBind> result = new ArrayList<ExpBind>();
                result.add(b);
                RESULT = result; :};

binding ::= VAR:v BIND expression:e {: RESULT = new ExpBind(v, e); :};


funDefn ::= PROC LPAREN paramListE:pListE RPAREN body:b {:
				RESULT = new StmtFunDefn(pListE, b); :} |
			PROC LPAREN paramList:pList DOT VAR:paramOvf RPAREN body:b {:
				RESULT = new StmtFunDefn(pList, paramOvf, b); :} |
			PROC VAR:v body:b {:
				RESULT = new StmtFunDefn(v, b); :};

paramList ::=  paramList:pList COMMA VAR:v {:
					pList.add(v);
					RESULT = pList; :} |
				VAR:v {:
					ArrayList<String> pList = new ArrayList<String>();
					pList.add(v);
					RESULT = pList; :};

paramListE ::= paramList:pList {: RESULT = pList; :} |
				empty {: RESULT = new ArrayList<String>(); :};


case ::= CASE LBRACE clauseLst:cList RBRACE {: RESULT = new ExpCase(cList); :};

clauseLst ::= clauseLst:cList COMMA clause:c {:
				cList.add(c);
				RESULT = cList; :} |
			clause:c {:
				ArrayList<ExpClause> cList = new ArrayList<ExpClause>();
				cList.add(c);
				RESULT = cList; :};

clause ::= expression:pred COLON body:conseq {: RESULT = new ExpClause(pred, conseq); :};


ifStmt ::= IF expression:e THEN body:conseq else:alt {:
				RESULT = new ExpIf(e, conseq, alt); :};

else  ::= ELSE body:alt {: RESULT = alt; :} |
			empty {: RESULT = new SmplNone(); :};


funCall ::= CALL LPAREN expression:f COMMA expression:lst RPAREN {:
				RESULT = new ExpFunCall(f, lst); :} |
			VAR:v LPAREN argListE:aListE RPAREN {:
				RESULT = new ExpFunCall(v, aListE); :};

argList ::= argList:aList COMMA expression:e {:
				aList.add(e);
				RESULT = aList; :} |
			expression:e {: ArrayList<Exp> aList = new ArrayList<Exp>();
					aList.add(e);
					RESULT = aList;
			:};

argListE ::= argList:aList {: RESULT = aList; :} |
			empty {: RESULT = new ArrayList<Exp>(); :};


read ::= READ LPAREN RPAREN {: RESULT = new ExpRead(); :} |
		READINT LPAREN RPAREN {: RESULT = new ExpReadInt(); :};


list ::= LSQPAREN pairElementLst:lst RSQPAREN {:
			RESULT = new ExpLit<ArrayList<Exp>>("pair", lst); :};

pairElementLst ::= pairElementLst:lst COMMA expression:e {:
			lst.add(e);
			RESULT = lst; :} |
		expression:e {:
			ArrayList<Exp> lst = new ArrayList<Exp>();
			lst.add(e);
			RESULT = lst; :};


vector ::= VECT_OPEN vectorElementLst:lst VECT_CLOSE {:
			RESULT = new ExpLit<ArrayList<Exp>>("vector", lst); :};

vectorElementLst ::= vectorElementLst:lst COMMA expression:e {:
			lst.add(e);
			RESULT = lst; :} |
		expression:e {:
			ArrayList<Exp> lst = new ArrayList<Exp>();
			lst.add(e);
			RESULT = lst; :};


empty ::= ;
