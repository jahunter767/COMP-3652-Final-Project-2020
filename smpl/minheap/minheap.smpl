def MAX_SIZE 15;
def INFINITY 100000;

def mkHeap proc(vector, size){
    heapify(vector, size);
}

def parent proc(i){
    (i - 1 ) /# 2;
}

def left_child proc(i){
    2 * i + 1;
}

def right_child proc(i){
    2 * i + 2;
}

def getMin proc(heap){
    heap[0];
}

def swap_and_insert proc(heap, i, value){
    if heap[i] < heap[parent(i)] and i != 0 then {
        def temp heap[i];
        heap[i] := heap[parent(i)];
        heap[parent(i)] := temp;

        swap_and_insert(heap, parent(i) , value);
    }
    else{
        heap[0];
    };
}

def insert proc(heap, data){
    if count < MAX_SIZE  then{
        heap[count] := data;
        swap_and_insert(heap, count, data);
        count := count + 1;
    }
    else{
        println("Heap is full");
    };
}

def min_heapify proc(heap, index, size){
    def left left_child(index);
    def right right_child(index);
    def smallest index;
    if left <= size then {
        if heap[left] < heap[smallest] then{
            smallest := left;
        };
    };

    if right <= size then {
        if heap[right] < heap[smallest] then{
            smallest := right;
        };
    };

    if smallest != index then {
        def temp heap[index];
        heap[index] := heap[smallest];
        heap[smallest] := temp;
        min_heapify(heap, smallest, size);
    };
}

def heapify proc(heap, index, size){
    if index >= 0 then {
        min_heapify(heap, index, size);
        heapify(heap, index - 1, size);
    };
}

def deleteMin proc(heap){
    if count > 0 then {
        def min getMin(heap);
        heap[0] := heap[count - 1];
        heap[count - 1] := 10000;
        count := count - 1;

        min_heapify(heap, 0, count);
        min;
    }
    else{
        println("Heap is empty");
    };
    
}

def print_heap proc(heap, count){
    if count < 0 then {
        println("Heap is empty");
    }
    else{
        if count < 1 then {
            println(heap[0]);
        }
        else{
            println(heap[count]);
            print_heap(heap, count - 1);
        };
    };
}