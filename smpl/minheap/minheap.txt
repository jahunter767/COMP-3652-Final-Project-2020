def MAX_SIZE 10;

def mkHeap proc(vector, size){
    heapify(vector, size);
}

def parent proc(i){
    (i - 1 ) /# 2;
}

def left_child proc(i){
    2 * i + 1;
}

def right_child proc(i){
    2 * i + 2;
}

def getMin proc(heap){
    heap[0];
}

def swap_and_insert proc(heap, i, value){
    def child heap[i];
    def root heap[parent(i)];
    if child < root and i != 0 then {
        def temp heap[i];
        heap[i] := root;
        heap[parent(i)] := temp;

        swap_and_insert(heap, parent(i) , value);
    }
    else{
        heap[0];
    };
}

def insert proc(heap, data){
    if count < MAX_SIZE  then{
        heap[count] := data;
        swap_and_insert(heap, count, data);
        count := count + 1;
    };
}

def min_heapify proc(heap, index, size){
    def left left_child(index);
    def right right_child(index);
    def smallest index;
    if left <= size then {
        def left_value heap[left];
        def smallest_value heap[smallest];
        if left_value < smallest_value then{
            smallest := left;
        };
    };

    if right <= size then {
        def right_value heap[right];
        def smallest_value heap[smallest];
        if right_value < smallest_value then{
            smallest := right;
        };
    };

    if smallest != index then {
        def temp heap[index];
        def smallest_value heap[smallest];
        heap[index] := smallest_value;
        heap[smallest] := temp;
        min_heapify(heap, smallest, size);
    };
}

def heapify proc(heap, index, size){
    if index >= 0 then {
        min_heapify(heap, index, size);
        heapify(heap, index - 1, size);
    };
}

def deleteMin proc(heap){
    def min getMin(heap);
    def last heap[count - 1];
    heap[count - 1] := 10000;
    heap[0] := last;
    count := count - 1;

    min_heapify(heap, 0, count);
    min;
}

def print_heap proc(heap, count){
    if count < 1 then {
        def root heap[0];
        println(root);
    }
    else{
        def element heap[count];
        println(element);
        print_heap(heap, count - 1);
    };
}